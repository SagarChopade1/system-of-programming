Implemented code of i386 assembly language code interprete and show how internaly code runs.
1)  you want to run code simply run command 
	-if see the symbol table 
		> python3 mainfile.py -s add1.asm
		  python3 mainfile.py -s anyFileToInput.asm
	-if see literal table 
		>python3 mainfile.py -l add1.asm
	
	-you want to see the intermediate code 
		>python3 mainfile.py -intr add1.asm
	
	-you want to see file of '_.lst' file
		>python3 mainfile.py -lst add1.asm
		in lst file squere bracket define constant '[constant]',{with scale index and base},(define with without scale index and base)
2) working process:
	- read line by line of .asm file and input to code 
		-check in data section
			-data(read_line)  # perform data section code and add in to symbol table and literal table
		- check is bss section
			-bss(read_line) # prerform bss code to evaluate accordingly
		-check is data section
			- data(read_line) # perfor operation accordingly
		1st pass complited
	2 -passes:
		again same process done from data section read code and update address of jump instruction
		
3) macro:
	-function like structure of macro implmented in assebly code
4) debugger :
	debugg code using intermediate code procees using and as you seys 
	code debugg using object code is in process.
